"use strict"; function _typeof(e) { return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, _typeof(e) } !function (e) { var t = { filename: "table.csv", appendTo: "body", separator: ",", newline: "\n", quoteFields: !0, trimContent: !0, excludeColumns: "", excludeRows: "" }, o = {}; e.fn.table2csv = function (n, r) { if ("object" === _typeof(n) ? (r = n, n = "download") : void 0 === n && (n = "download"), "string" != typeof n) throw new Error('"action" argument must be a string'); if (void 0 !== r && "object" !== _typeof(r)) throw new Error('"options" argument must be an object'); o = e.extend({}, t, r); var i = this.filter("table"); if (i.length <= 0) throw new Error("table2csv must be called on a <table> element"); if (i.length > 1) throw new Error("converting multiple table elements at once is not supported yet"); var l, a, u, c = function (t) { var n = "", r = t.find("tr").not(o.excludeRows), i = r.first().find("td,th").filter(":visible").not(o.excludeColumns).length; return r.each((function (t, r) { e(r).find("td,th").filter(":visible").not(o.excludeColumns).each((function (t, r) { var l = e(r), a = o.trimContent ? e.trim(l.text()) : l.text(); n += o.quoteFields ? '"' + a.replace(/"/g, '""') + '"' : a, n += t !== i - 1 ? o.separator : o.newline })) })), n }(i); switch (n) { case "download": l = o.filename, a = c, (u = document.createElement("a")).setAttribute("href", "data:text/csv;charset=utf-8,\ufeff" + encodeURIComponent(a)), u.setAttribute("download", l), u.style.display = "none", document.body.appendChild(u), u.click(), document.body.removeChild(u); break; case "output": e(o.appendTo).append(e("<pre>").text(c)); break; case "return": return c; default: throw new Error('"action" argument must be one of the supported action strings') }return this } }(jQuery);
